{"ast":null,"code":"var _jsxFileName = \"/Users/sallyhoneybee/Code/100DaysOfCode/Day_4/React/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport logo from \"./assets/investment-calculator-logo.png\";\nimport Form from \"./Components/Form\";\nimport Results from \"./Components/Results\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [yearlyResults, setYearlyResults] = useState();\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"currentSavings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearlySavings\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expectedInterest\"] / 100;\n    const duration = +userInput[\"investmentDuration\"];\n    const totalInterest = 0;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      totalInterest += yearlyInterest;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalInterest: totalInterest\n      });\n    }\n\n    // do something with yearlyData ...\n    setYearlyResults(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Results, {\n      results: yearlyResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xk5TxIhXhwNadBbIrtkoEODQPOw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","logo","Form","Results","jsxDEV","_jsxDEV","App","_s","yearlyResults","setYearlyResults","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","totalInterest","i","yearlyInterest","push","year","savingsEndOfYear","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","results","_c","$RefreshReg$"],"sources":["/Users/sallyhoneybee/Code/100DaysOfCode/Day_4/React/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport logo from \"./assets/investment-calculator-logo.png\";\nimport Form from \"./Components/Form\";\nimport Results from \"./Components/Results\";\n\nfunction App() {\n  const [yearlyResults, setYearlyResults] = useState();\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"currentSavings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearlySavings\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expectedInterest\"] / 100;\n    const duration = +userInput[\"investmentDuration\"];\n    const totalInterest = 0;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      totalInterest += yearlyInterest;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalInterest: totalInterest,\n      });\n    }\n\n    // do something with yearlyData ...\n    setYearlyResults(yearlyData);\n  };\n\n  return (\n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n      <Form onCalculate={calculateHandler} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <Results results={yearlyResults} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAEpD,MAAMU,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;IACA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACnD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;IACxD,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,kBAAkB,CAAC,GAAG,GAAG;IAC3D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,oBAAoB,CAAC;IACjD,MAAMM,aAAa,GAAG,CAAC;;IAEvB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGN,cAAc,GAAGE,cAAc;MACtDE,aAAa,IAAIE,cAAc;MAC/BN,cAAc,IAAIM,cAAc,GAAGL,kBAAkB;MACrDF,UAAU,CAACQ,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA,kBAAkB;QACtCG,aAAa,EAAEA;MACjB,CAAC,CAAC;IACJ;;IAEA;IACAR,gBAAgB,CAACG,UAAU,CAAC;EAC9B,CAAC;EAED,oBACEP,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAQmB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBlB,OAAA;QAAKoB,GAAG,EAAExB,IAAK;QAACyB,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7BzB,OAAA;QAAAkB,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAETzB,OAAA,CAACH,IAAI;MAAC6B,WAAW,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAKvCzB,OAAA,CAACF,OAAO;MAAC6B,OAAO,EAAExB;IAAc;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV;AAACvB,EAAA,CAhDQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}